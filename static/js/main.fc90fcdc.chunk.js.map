{"version":3,"sources":["components/Header.js","components/JournalEntry.js","data/moods.js","components/MoodContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","JournalEntry","className","this","props","time","date","action","htmlFor","id","placeholder","required","maxLength","rows","cols","wrap","type","tabIndex","Component","moods","mood","sentence","image","MoodContainer","getUserMood","event","chosenOne","target","value","childMood","setState","userMood","toggleMoods","state","dimButton","map","index","key","name","onClick","App","handleName","inputName","displayName","console","log","beginJournal","e","preventDefault","displayAlbumResult","userSelectedMood","finalResult","albumInfo","filter","album","albumMood","result","startOver","toggleUserInfo","axios","url","method","responseType","params","api_key","artist","format","then","response","albumArray","data","topalbums","sixArray","slice","newSixArray","entry","onChange","moment","href","rel","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc90fcdc.chunk.js","sourcesContent":["import React from 'react';\n\n// This component is just here for display so we use a function component\n\nconst Header = () => {\n\n\n    return(\n        <header>\n   \n            <h1>In My Feelings</h1>\n            \n            <h2>Get a Drake album to match your mood</h2>\n        </header>\n    )\n\n}\n\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass JournalEntry extends Component {\n  \n    \n \n\n\n\nrender(){\n    \n        return (\n            <div className=\"journal-entry\">\n\n        <h3><span>{this.props.time}</span> in Toronto on {this.props.date}</h3>\n\n                <form className=\"journal-form\" action='submit'>\n                    <div className=\"journal\">\n                        <label htmlFor=\"form-label\" className=\"form-label\" >What's got you in your feelings? Write about it here</label>\n                        <fieldset>\n                            <textarea \n                            id=\"journal\"\n                            placeholder=\"You used to call me on my cell phone. Late night when you need my love.\"\n                            required\n                            maxLength=\"350\"\n                            rows=\"5\"\n                            cols=\"50\"\n                            wrap=\"hard\">\n                            </textarea>\n                        </fieldset>\n                    </div>\n                    <div className=\"reflection\">\n                        <fieldset className=\"good\">\n                            <label htmlFor=\"one-word\" className=\"one-word\">Name something Too Good that happened today</label>\n                            <input type=\"text\" id=\"one-word\" placeholder=\"I ran through the 6 with my woes.\"\n                            required></input>\n                        </fieldset>\n\n                        <fieldset className=\"bad\">\n                            <label htmlFor=\"one-word\" className=\"one-word\" >Name one thing that had you on your Worst Behaviour</label>\n                            <input type=\"text\" id=\"one-word\" placeholder=\"Last night, I think I lost my patience.\" required></input>\n                        </fieldset>\n                    </div>\n                </form>\n\n                <button \n                type=\"submit\"\n                tabIndex=\"0\"\n                >Know Yourself</button>\n            </div>\n        );\n    }\n\n\n}\n\n\n\n\n\n\nexport default JournalEntry;\n\n\n\n// The button on this component I want to keep in order to refactor this app with firebase in the future. For now it is for display.\n","const moods = [\n    {\n        mood: \"Upset\",\n        sentence: \"Getting right into dem feelings.\",\n        image: \"\",\n        // Take Care\n\n    },\n\n    {\n        mood: \"Happy\",\n        sentence: \"Right now it's all good on your end.\",\n        image: \"\",\n        // Views\n    },\n\n    {\n        mood: \"Unsure\",\n        sentence: \"You're feeling a little anxious today.\",\n        image: \"\",\n        // Thank Me Later\n    },\n\n    {\n        mood: \"Angry\",\n        sentence: \"Not the time. No long talk.\",\n        image: \"\",\n        // Scorpion\n    },\n\n    {\n        mood: \"Romantic\",\n        sentence: \"Feelin the love, lovin the feeling.\",\n        image: \"\",\n        // More Life\n    },\n\n    {\n        mood: \"Confident\",\n        sentence: \"You in the building and you're feeling yourself.\",\n        image: \"\",\n        // Nothing Was the Same\n    }\n\n]\n\nexport default moods;","import React, { Component } from 'react';\nimport moods from '../data/moods';\n\n\nclass MoodContainer extends Component {\n   \n    constructor(){\n        super();\n\n        this.state=({\n            userMood: \"\",\n            toggleMoods: true,\n            dimButton: ''\n        })\n        \n    }\n\n    getUserMood = (event) => {\n\n        const chosenOne = event.target.value;\n        event.target.className = 'not-dimmed';\n        \n        this.props.childMood(chosenOne);\n\n        this.setState({\n            userMood: chosenOne,\n            toggleMoods: !this.state.toggleMoods,\n            dimButton: this.state.dimButton ? '' : 'dim'\n        })\n    }\n\n\n\n\n\n    \n\n  \n    render(){\n\n        return (\n          \n            moods.map((mood, index) => {\n                return (\n                    <div \n                    className=\"mood-box\" \n                    key={index} \n                    tabIndex=\"0\" >\n\n                        <label\n                        htmlFor={`moods${index}`}\n                        >\n                            {mood.mood} <br/>\n                            {mood.sentence}\n                        </label>\n\n                        <input  \n                        type=\"radio\"\n                        className=\"mood-button\"\n                        id={`moods${index}`}\n                        value={mood.mood}\n                        name=\"pickMood\"\n                        onClick={this.getUserMood}\n                        \n                        >\n                        </input>\n                \n                    </div>\n                    \n                    \n                );\n            })\n\n            \n        );\n    }\n}\n\n\n\n\n\nexport default MoodContainer;\n\n\n\n// <div \n//                     className=\"mood-box\" \n//                     key={index} \n//                     tabIndex=\"0\" >\n\n//                         <button \n//                         className={`mood-button ${this.state.dimButton}`}\n//                         value={mood.mood}\n//                         onClick={this.getUserMood}\n//                         // style={({opacity: this.state.toggleMoods ? 1 : 0.4})}\n//                         // add class and another one later in the cascade\n                        \n//                         >\n                            \n\n//                             {mood.mood} <br/>\n//                             {mood.sentence}\n\n//                         </button>\n                \n//                     </div>\n\n// don't put label inside input\n//match ids in order to access selections\n//${this.state.dimButton}ß\n\n","import React, { Component } from 'react';\nimport './App.css';\n\n// Custom Imports \nimport Header from './components/Header';\n// import IntroForm from './components/IntroForm';\nimport JournalEntry from './components/JournalEntry';\nimport MoodContainer from './components/MoodContainer';\nimport axios from 'axios';\nimport moment from 'moment';\n\n\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n\n      toggleUserInfo: true,\n      \n      albumInfo: [],\n\n      result: [],\n\n      displayName: \"\"\n\n    }\n  }\n\n\n\n\n  // Axios API Call\n  componentDidMount (){\n    const apiKey = 'a0b4a2a68217ad3b52fe53e7b7ba0679';\n\n    axios({\n        url: 'http://ws.audioscrobbler.com/2.0/',\n        method: 'GET',\n        responseType: 'json',\n        params: {\n            api_key: apiKey,\n            method: 'artist.gettopalbums',\n            artist: 'drake',\n            format: 'json'\n        }  \n    }).then((response) => {\n\n// Manipulate information from the API call \n        const albumArray = response.data.topalbums.album\n\n        const newAlbumArray = [...albumArray];\n\n\n// Grab the six albums I want to work with\n        const sixArray = newAlbumArray.slice(1,7);\n        // go into this and add on a mood porperty\n\n// Duplicate the original array and add the mood as a new object\n        const newSixArray = [...sixArray];\n\n          newSixArray.map((entry) => {\n            \n            if(entry.name === \"Views\"){\n              return entry.albumMood = \"Happy\";\n\n            } else if (entry.name === \"Take Care\"){\n              return entry.albumMood = \"Upset\";\n\n            } else if (entry.name === \"Thank Me Later\"){\n              return entry.albumMood = \"Unsure\";\n\n            } else if (entry.name === \"Nothing Was the Same\"){\n              return entry.albumMood = \"Confident\";\n\n            } else if (entry.name === \"Scorpion\"){\n              return entry.albumMood = \"Angry\";\n\n            } else if (entry.name === \"More Life\"){\n              return entry.albumMood = \"Romantic\";\n            }\n\n              return newSixArray;\n        });\n\n        console.log(newSixArray);\n       \n        \n        this.setState({\n                albumInfo: newSixArray,\n            })\n    })\n}\n\n\n// Toggle display after form entry\n\n  handleName = (name) => {\n    const inputName = name.target.value;\n    \n    this.setState({\n    displayName: inputName,\n\n    })\n    console.log(inputName);\n\n  }\n\n\n  beginJournal = (e) => {\n    e.preventDefault();\n\n  \n}\n\n\n\n\n// Display album that corresponds with mood and set to state\n\n displayAlbumResult = (userSelectedMood) => {\n   const finalResult = this.state.albumInfo.filter((album) => {\n    return album.albumMood === userSelectedMood;\n\n   })\n\n   this.setState({\n     result: finalResult,\n   })   \n }\n\n\n  // Clear selected mood and choose another\n  startOver = () => {\n\n    this.setState({\n      result: [],\n    })\n\n  }\n\n\n\n\n  render (){\n    \n    return (\n\n    <div className=\"App wrapper\">\n      <Header />\n\n      \n      <div className=\"name-entry\">\n\n                \n        <form className=\"enter-info\" >\n\n          <label htmlFor=\"enter-name\">What's My Name?</label>\n\n          <input \n              type=\"text\" \n              id=\"enter-name\" \n              placeholder=\"Kiki\" \n              value={this.state.displayName}\n              onChange = {this.handleName}\n              required\n              tabIndex=\"0\"\n          />\n          \n\n          <button \n          onClick={this.beginJournal}\n          type=\"submit\"\n          tabIndex=\"0\"\n          \n          >Go</button>\n\n        </form>\n\n        {this.state.displayName ? <h3 className=\"welcome\">Welcome, {this.state.displayName}</h3> : null}\n\n      </div>\n\n      \n      <JournalEntry \n       time={moment().format(\"h A\")}\n       date={moment().format(\"MMMM D\")}\n\n        \n      />\n      \n      <div className=\"mood-entry\">\n        <h2>Choose a mood below.</h2>\n        <div className=\"mood-container\">\n          <MoodContainer \n            childMood={this.displayAlbumResult}\n\n            \n          />\n        </div>\n      </div>\n\n\n      <div className=\"album-container\">\n\n          {this.state.result.map((album, index) => {\n\n            return(\n              <div key={index} className=\"result-box\" >\n                    <h2>So you're feeling {album.albumMood}</h2>\n\n                    <h3>Click the cover to listen to {album.name}</h3>\n\n                    <a href={album.url} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\" \n                    tabIndex=\"0\"\n                    >\n                      <img src={album.image[3][\"#text\"]} \n                      alt={`Cover of ${album.name} with a link to lastfm.com`}\n                      tabIndex=\"0\"/>\n                    </a>\n\n                    <button\n                    onClick={this.startOver}\n                    >Start Over</button>\n              </div>\n            );\n            \n          })}\n\n      </div>\n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n// Credits\n// A big shoutout to the Gratitude Journal example by Alexandra Lim for a flow, and imports to help create this project\n\n// The constructor is a method that’s automatically called during the creation of an object from a class.\n// this used in constructor always refers to the constructor object and aLWAYS contains the props property\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}