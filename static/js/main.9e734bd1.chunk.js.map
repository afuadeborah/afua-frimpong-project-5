{"version":3,"sources":["components/JournalEntry.js","data/moods.js","components/MoodContainer.js","components/Footer.js","components/firebase.js","App.js","serviceWorker.js","index.js"],"names":["JournalEntry","handleJournal","event","writingInput","target","value","setState","journalInput","props","submitJournal","console","log","saveLocal","pushLocal","state","className","this","time","date","action","htmlFor","id","JournalInput","onChange","placeholder","required","maxLength","rows","cols","wrap","type","tabIndex","onClick","Component","moods","mood","sentence","MoodContainer","getUserMood","chosenOne","childMood","userMood","checked","map","index","key","name","Footer","href","rel","aria-hidden","title","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleName","inputName","displayName","beginJournal","e","preventDefault","database","ref","set","currentTime","currentDate","userName","albumOfDay","journalEntry","pushTimeandDate","userTime","moment","format","userDate","update","writeEntry","displayAlbumResult","userSelectedMood","finalResult","albumInfo","filter","album","albumMood","result","startOver","journalEntries","userEntries","dbRef","on","entry","newState","data","val","push","axios","url","method","responseType","params","api_key","artist","then","response","albumArray","topalbums","sixArray","slice","newSixArray","src","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e734bd1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass JournalEntry extends Component {\n  \n    constructor (){\n        super();\n\n        this.state = {\n            journalInput: '',\n\n        }\n    }\n\n    handleJournal = (event) => {\n\n        const writingInput = event.target.value;\n    \n        \n        this.setState({\n            journalInput: writingInput,\n\n        })\n        \n        this.props.submitJournal(writingInput);\n        console.log(writingInput);\n        \n    }\n\n    saveLocal = (event) => {\n        this.props.pushLocal(event);\n    }\n \n\n\n\nrender(){\n    \n        return (\n            <div className=\"journal-entry\">\n\n                <h3>{this.props.time} in Toronto on {this.props.date}</h3>\n\n                <form \n                className=\"journal-form\" \n                action='submit'>\n\n                    <div className=\"journal\">\n\n                        <label \n                        htmlFor=\"form-label\" className=\"form-label\" >\n                            What's got you in your feelings? Write about it here\n                        </label>\n\n                        <fieldset>\n\n                            <textarea \n                            id=\"journal\"\n                            value={this.state.JournalInput}\n                            onChange={this.handleJournal}\n                            placeholder=\"You used to call me on my cell phone. Late night when you need my love.\"\n                            required\n                            maxLength=\"350\"\n                            rows=\"10\"\n                            cols=\"50\"\n                            wrap=\"hard\">\n                            </textarea>\n\n                        </fieldset>\n\n                    </div>\n\n\n                </form>\n\n                <button \n                type=\"submit\"\n                tabIndex=\"0\"\n                onClick={this.saveLocal}\n                >Know Yourself\n                </button>\n            </div>\n        );\n    }\n\n\n}\n\n\n\n\n\n\nexport default JournalEntry;\n\n\n\n// The button on this component I want to keep in order to refactor this app with firebase in the future. For now it is for display.\n","const moods = [\n    {\n        mood: \"Upset\",\n        sentence: \"Getting right into dem feelings.\",\n\n        // Take Care\n\n    },\n\n    {\n        mood: \"Happy\",\n        sentence: \"Right now it's all good on your end.\",\n\n        // Views\n    },\n\n    {\n        mood: \"Unsure\",\n        sentence: \"You're feeling a little anxious today.\",\n\n        // Thank Me Later\n    },\n\n    {\n        mood: \"Angry\",\n        sentence: \"Not the time. No long talk.\",\n\n        // Scorpion\n    },\n\n    {\n        mood: \"Romantic\",\n        sentence: \"Feelin the love, lovin the feeling.\",\n\n        // More Life\n    },\n\n    {\n        mood: \"Confident\",\n        sentence: \"You in the building and you're feeling yourself.\",\n   \n        // Nothing Was the Same\n    }\n\n]\n\nexport default moods;","import React, { Component } from 'react';\nimport moods from '../data/moods';\n\n\nclass MoodContainer extends Component {\n   \n    constructor(){\n        super();\n\n        this.state=({\n            userMood: \"\",\n\n            checked: false\n        })\n        \n    }\n\n    getUserMood = (event) => {\n\n        const chosenOne = event.target.value;\n\n        \n        this.props.childMood(chosenOne);\n\n        this.setState({\n            userMood: chosenOne,\n            checked: !this.state.checked\n        })\n\n        \n    }\n\n  \n    render(){\n        \n        return (\n          \n            moods.map((mood, index) => {\n                return (\n                    <div \n                    className=\"mood-box\" \n                    key={index} \n                    onClick={this.getUserMood}\n                    tabIndex=\"0\">\n                        \n                        <label\n                        htmlFor={`moods${index}`}>\n\n                            {mood.mood} <br/>\n                            <p>{mood.sentence}</p>\n                            \n                        </label>\n\n                            <br/>\n\n                        <input  \n                        type=\"radio\"\n                        className=\"mood-button\"\n                        id={`moods${index}`}\n                        value={mood.mood}\n                        name=\"pickMood\">\n                        </input>\n                \n                    </div>\n                    \n                );\n            })    \n        );\n    }\n}\n\n\n\n\n\nexport default MoodContainer;\n\n\n\n","import React from 'react';\nimport { FaGithub, FaTwitter }  from 'react-icons/fa';\n\n\n// This component is just here for display so we use a function component\n\nconst Footer = () => {\n\n\n    return(\n        <footer>\n            <p>\n                <a href=\"http://www.afuadeborahcodes.com/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                tabIndex=\"0\"\n                >Afua Deborah\n                </a> \n            </p>\n            \n            <p>Juno College 2020 </p>\n\n            <p>Hotline Bling:</p>\n\n            <a href=\"https://github.com/afuadeborah\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title= \"@afuadeborah on Github\"\n            alt=\"Go to afuadeborah on Github\"\n            >\n                <FaGithub />\n            </a>\n            \n            <a href=\"https://twitter.com/afuadeborah_\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"@afuadeborah_ on Twitter\"\n            alt=\"Go to afuadeborah on Twitter\"\n            >\n                <FaTwitter />\n            </a>\n            \n        </footer>\n    )\n\n}\n\n\nexport default Footer;","import firebase from 'firebase';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDxeg8E-TFGagF4wiD2mBAYvAS99DQM7GQ\",\n    authDomain: \"in-my-feelings-project-5.firebaseapp.com\",\n    databaseURL: \"https://in-my-feelings-project-5.firebaseio.com\",\n    projectId: \"in-my-feelings-project-5\",\n    storageBucket: \"in-my-feelings-project-5.appspot.com\",\n    messagingSenderId: \"103066453618\",\n    appId: \"1:103066453618:web:00facc82634cc68e0624eb\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// Custom Imports \nimport JournalEntry from './components/JournalEntry';\nimport MoodContainer from './components/MoodContainer';\nimport Footer from './components/Footer';\nimport firebase from './components/firebase';\n\n\n\n\n\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      \n      albumInfo: [],\n\n      result: [],\n\n      displayName: \"\",\n\n      userEntries: [],\n\n      dbRef: firebase.database().ref(),\n    }\n  }\n\n\n\n\n  // Axios API Call & Firebase Setup\n  componentDidMount (){\n  // Firebase\n\n    // Event Listener when changes are made to database\n    this.state.dbRef.on('value', entry => {\n\n      const newState = [];\n      // Hold the journalEntries state here in this scope\n\n      const data = entry.val();\n      // Holds the actual info we're putting into the database\n\n      // data is an OBJECT, loop through it to access each entry\n      for (let key in data) {\n        newState.push({\n\n          id: key,\n\n          entry: data[key]\n\n        });\n      }\n      // Push each entry to the newState array\n\n      this.setState({\n        userEntries: newState,\n      });\n      \n    });\n\n    \n\n\n\n    // Axios API Call\n    const apiKey = 'a0b4a2a68217ad3b52fe53e7b7ba0679';\n\n    axios({\n        url: 'http://ws.audioscrobbler.com/2.0/',\n        method: 'GET',\n        responseType: 'json',\n        params: {\n            api_key: apiKey,\n            method: 'artist.gettopalbums',\n            artist: 'drake',\n            format: 'json'\n        }  \n    }).then((response) => {\n      \n\n// Manipulate information from the API call \n    const albumArray = response.data.topalbums.album\n\n    const newAlbumArray = [...albumArray];\n\n\n// Grab the six albums I want to work with\n    const sixArray = newAlbumArray.slice(1,7);\n    // go into this and add on a mood porperty\n\n// Duplicate the original array and add the mood as a new object\n    const newSixArray = [...sixArray];\n\n      newSixArray.map((entry) => {\n        \n        if(entry.name === \"Views\"){\n          return entry.albumMood = \"Happy\";\n\n        } else if (entry.name === \"Take Care\"){\n          return entry.albumMood = \"Upset\";\n\n        } else if (entry.name === \"Thank Me Later\"){\n          return entry.albumMood = \"Unsure\";\n\n        } else if (entry.name === \"Nothing Was the Same\"){\n          return entry.albumMood = \"Confident\";\n\n        } else if (entry.name === \"Scorpion\"){\n          return entry.albumMood = \"Angry\";\n\n        } else if (entry.name === \"More Life\"){\n          return entry.albumMood = \"Romantic\";\n        }\n\n          return newSixArray;\n        });\n        \n    this.setState({\n      albumInfo: newSixArray,\n    })\n\n  })\n}\n\n\n// Display user's name \n\n  handleName = (name) => {\n    const inputName = name.target.value;\n    \n    this.setState({\n    displayName: inputName,\n\n    });\n\n    \n\n  }\n\n// Prevent page from reloading and resetting state when we click Go.\n// This button will be used to push information into Firebase for future rework\n  beginJournal = (e) => {\n    e.preventDefault();\n\n    const dbRef = firebase.database().ref(\"Users/\" + this.state.displayName);\n\n    dbRef.set({\n      currentTime: '',\n      currentDate: '',\n      userName: this.state.displayName,\n      albumOfDay: '',\n      mood: '',\n      journalEntry: '',\n    })\n\n    \n  }\n\n  pushTimeandDate = (e) => {\n  \n    const userTime = moment().format(\"h A\");\n    const userDate= moment().format(\"MMMM D\");\n\n    const dbRef = firebase.database().ref(\"Users/\" + this.state.displayName);\n\n    dbRef.update({ \n      currentDate: userDate,\n      currentTime: userTime,\n    });\n    \n  }\n\n  writeEntry = (event) => {\n    // event.preventDefault();\n    const dbRef = firebase.database().ref(\"Users/\" + this.state.displayName);\n\n\n    dbRef.update({\n      journalEntry: event,\n    })\n\n\n  }\n\n\n\n// Display album that corresponds with mood and set to state\n\n  displayAlbumResult = (userSelectedMood) => {\n    const finalResult = this.state.albumInfo.filter((album) => {\n      return album.albumMood === userSelectedMood;\n\n    })\n\n    this.setState({\n      result: finalResult,\n    });\n\n  \n\n    // To update Firebase\n    // const moodAlbum = finalResult[0].name;\n    // const chosenMood = finalResult[0].albumMood;\n\n    \n    // const dbRef = firebase.database().ref(\"Users/\" + this.state.displayName);\n\n    // dbRef.update({ \n    //   albumOfDay: moodAlbum,\n    //   mood: chosenMood\n    // });\n    \n    \n  }\n // Go through each mood in the albumInfo array. If the mood we pushed into the axios API object matches the mood we click on, push this mood into the emoty result array and set the result state to the mood.\n\n\n// Clear journal and selected mood and start over\n  startOver = () => {\n\n    this.setState({\n      result: [],\n      displayName: \"\",\n      journalEntries: [],\n\n    })\n\n  }\n\n\n\n\n  render (){\n    \n    return (\n\n    <div className=\"App wrapper\">\n      <header>\n   \n        <h1>In My Feelings</h1>\n        \n        <h2>Get a Drake album to match your mood</h2>\n        \n      </header>\n\n      \n      <div className=\"name-entry\">\n\n                \n        <form className=\"enter-info\" >\n\n          <label htmlFor=\"enter-name\">What's My Name?</label>\n\n          <input \n              type=\"text\" \n              id=\"enter-name\" \n              placeholder=\"Kiki\" \n              value={this.state.displayName}\n              onChange = {this.handleName}\n              required\n              tabIndex=\"0\"\n          />\n          \n          <button \n          onClick={this.beginJournal}\n          type=\"submit\"\n          tabIndex=\"0\"\n          >Go</button>\n\n        </form>\n\n        {this.state.displayName ? <h2 className=\"welcome\">Welcome, {this.state.displayName}</h2> : null}\n\n      </div>\n\n      \n      <JournalEntry \n       time={moment().format(\"h A\")}\n       date={moment().format(\"MMMM D\")}\n       pushLocal={this.pushTimeandDate}\n       submitJournal={this.writeEntry}/>\n      \n      <div className=\"mood-entry\">\n        <h2>Choose a mood below.</h2>\n        <div className=\"mood-container\">\n          <MoodContainer \n            childMood={this.displayAlbumResult} />\n        </div>\n      </div>\n\n\n      <div className=\"album-container\">\n\n        {this.state.result.map((album, index) => {\n\n          return (\n            <div \n            key={index} \n            className=\"result-box\" >\n              <h2>So you're feeling {album.albumMood}</h2>\n\n              <h3>Click the cover to listen to {album.name}</h3>\n\n              <a href={album.url} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                tabIndex=\"0\">\n                  \n                <img src={album.image[3][\"#text\"]} \n                  alt={`Cover of ${album.name} with a link to lastfm.com`}\n                  title={`Play ${album.name} on Lastfm.com`}\n                  tabIndex=\"0\"/>\n              </a>\n\n              <button\n              onClick={this.startOver}\n              >Start Over</button>\n\n            </div>\n\n          );\n\n        })}\n\n      </div>\n\n      <Footer />\n\n    </div>\n    // .App Scope Ends \n  \n\n    );\n  } \n}\n\nexport default App;\n\n// Credits\n// A big shoutout to the Gratitude Journal example by Alexandra Lim for a flow, and imports to help create this project\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}